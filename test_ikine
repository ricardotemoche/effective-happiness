#!/usr/bin/env python

import rospy
from sensor_msgs.msg import JointState
from markers import *
from functions import *


rospy.init_node("testInvKine")
pub = rospy.Publisher('joint_states', JointState, queue_size=1000)

errores = open("/tmp/ikine_error.txt", "w")

bmarker      = BallMarker(color['RED'])
bmarker_des  = BallMarker(color['GREEN'])

# Joint names
jnames = ['joint1', 'joint2', 'joint3', 'joint4', 'joint5', 'joint6']

# Desired position
xd = np.array([0, 0.148, 1.146])
# Initial configuration
q0 = np.array([0.1, 0.8, 0.8, 1, 0.3, 0.0])
# Inverse kinematics
q,ee = ikine(xd, q0)
 
for i in range(np.size(ee)):
    # Log values                                                      
    errores.write(str(ee[i])+'\n')
   
# Resulting position (end effector with respect to the base link)
T = fkine(q)
print('Obtained value:\n', np.round(T,3))
 
# Red marker shows the achieved position
bmarker.xyz(T[0:3,3])
# Green marker shows the desired position
bmarker_des.xyz(xd)
 
# Objeto (mensaje) de tipo JointState
jstate = JointState()
# Asignar valores al mensaje
jstate.header.stamp = rospy.Time.now()
jstate.name = jnames
# Add the head joint value (with value 0) to the joints
qr=np.array([q[0],q[1],q[2],q[3],q[4],q[5]])
jstate.position = qr
 
# Loop rate (in Hz)
rate = rospy.Rate(20)
# Continuous execution loop
while not rospy.is_shutdown():
    # Current time (needed for ROS)
    jstate.header.stamp = rospy.Time.now()
    # Publish the message
    pub.publish(jstate)
    bmarker.publish()
    bmarker_des.publish()
    # Wait for the next iteration
    rate.sleep()
 
errores.close()